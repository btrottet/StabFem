///
// THIS PROGRAM IS ADAPTED FROM Eigen_Bridge_Potential.edp from LiquidBridges++_V1.3
// imported in STABFEM project by D. Fabre on december 2017.
// STILL TO BE RATIONALIZED A LOT !!!


//  Computation of the eigenvalues and eigenvectors for oscillations of a liquid bridge
//  (inviscid theory)
// ----------------------------------------
// the problem is potential : u = i grad (phi) (mind the "i" factor !) 
// PROBLEM : find $\omega$ and $[phi,eta]$  such that
// 	$$ \Delta \phi = 0 $$ inside the domain
// 	$$ \omega \phi = \gamma (-(K0a^2+K0b^2) \eta - \partial^2 \eta / \partial s^2 + m^2/r^2 \eta $$ on the free surface
// 	$$ \omega \eta = grad \phi \dot n $$ on the free surface 
// 
//-----------------------------------------

// Remarque : phi et eta sont definis comme des champs P2 sur le volume, meme si eta n'a de sens qu'à la surface


include "Macros_StabFem.edp"

verbosity=0;

// constantes physiques 
//real g=0;                 // Gravity field
real gamma=1;	  // Surface Tension
real R=1;
real dpdz;


cout << "ENTREZ LA TENSION DE SURFACE GAMMA : "<< endl;
cin >> gamma;
if(gamma != 1){ 
	// TO BE MODIFIED !
	cout << "WARNING : PROGRAM HAS TO BE ADAPTED FOR GAMMA ~= 1"<< endl; 
	exit(-1);
	} ;


cout << "ENTREZ LE PARAMETRE DE GRAVITE dp/dz = rho g : "<< endl;
cin >> dpdz;



// Parametres du calcul
int m;  // Nombre d'onde

cout << " ENTREZ Le nombre d'onde m ?" << endl;
cin >> m;
cout << "==> Calcul des valeurs propres pour m = " << m << endl;

int nev;
cout << " ENTREZ le nombre de modes a calculer " << endl;
cin >> nev;
int Nval = min(nev,10);  // nb. de valeurs propres à calculer
int Nmodes = nev; // nb. de vecteurs propres à post-traiter






////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////


mesh th=readmesh(ffdatadir+"mesh.msh");
//mesh th=th; // autre nom possible...
mesh Shempty=emptymesh(th); 	// Maillage 'surface'
real L, K0, Vol, Area;

include "Macros_Geometrie_Surface.edp"

SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
// Calcul des normales et des courbures
CalcGeomSurf;



fespace VhxVh(th,[P1,P1]);

VhxVh [phi,eta],[q,v];


real shift = 1e-12;  // value of the shift
real RegEta = 1e-8;


// CONSTRUCTION DES MATRICES

varf a([phi,eta],[q,v]) = // order of test fun. shoud be [v,q] for SLEPC ; [q,v] instead
// Laplacian	  
	  int2d(th)(  (dx(phi)*dx(v) + dy(phi)*dy(v)+(m^2+1e-8)*phi*v/(x^2+1e-30))*x  )  //try+ v*dx(phi)/(x+1e-8) ???
	  		// desingularisation term necessary if m=0 ; don't know why
// Curvature	  
	+ int1d(th,2)(((Ds(eta))*(Ds(q))-(K0a^2+K0b^2)*eta*q+m^2/(x^2+1e-30)*q*eta)*abs(x))
// gravity
	+ int1d(th,2)(dpdz*eta*q*N0z*x)
// shift 
	- int1d(th,2)(shift*(eta*v+q*phi)*x)
// Pour regulariser eta dans le volume
		+ int2d(th)((dx(q)*dx(eta)+dy(q)*dy(eta))*RegEta*abs(x)) //  deuxieme idee : laplacien 
// Conditions limites par penalisation
+ int1d(th,1,5)(1e30*eta*q*abs(x)) // pour ligne de contact fixee
+ int1d(th,1)(m*phi*v*1e30) // CL axe pour m different de 0

// CONDITION LIMITE DE DIRICHLET SUR PHI (supprime la condition de neumann orthogonale)
//+ int1d(th,6)(phi*v*1e30*abs(x)); //MARCHE
//+ on(6,phi=0.0); //NE MARCHE PAS
;



varf b([phi,eta],[q,v]) = 
        int1d(th,2)(eta*v*x)
       +int1d(th,2)(q*phi*x)
	//+ int1d(th,6)(phi*v*1e30*abs(x))
;


////////////////////////////////////////////////////
//
//  RESOLUTION DU PB AUX VALEURS PROPRES
//
//  Important warning : here the computed eigenvalues correspond to omega = lambda/i !
//  
/////////////////////////////////////////////////////


matrix A= a(VhxVh,VhxVh,solver=UMFPACK); 
matrix B= b(VhxVh,VhxVh,solver=GMRES,eps=1e-20); 

//int nev=Nval;  // number of computed eigen valeu close to sigma
real[int] evr(Nval+1),evi(Nval+1); // to store nev eigein values
VhxVh[int] [eVphi,eVeta](Nval+1);   // to store nev eigen vectors

int k=EigenValue(A,B,sym=false,sigma=shift,value=evr,ivalue=evi,vector=eVphi,tol=1e-10,maxit=0,ncv=0);

////////////////////////////////////////////////////
//
//    POST TRAITEMENT
//
///////////////////////////////////////////////////


cout << " ### VP Calculees :" << endl;

//real[int]  eev(Nval);
ofstream EV(ffdatadir+"Spectrum.txt");
EV.scientific;

VhxVh<complex> [Modephi,Modeeta];
complex lambda;

for (int i=0;i<Nval;i++)
{
if(evi[i] == 0)
	{// real eigenvalue -> purely oscillating mode
	lambda = 1i*evr[i];
	[Modephi,Modeeta] = [1i*eVphi[i],(1.+0i)*eVeta[i]];
	}
else if(i>0&&evi[i]==evi[abs(i-1)]) // abs is to prevent a bug 
	{// pair of complex eigenvalues with previous one
	lambda = 1i*evr[i]-evi[i-1];
	[Modephi,Modeeta] = [1i*eVphi[i]+eVphi[i-1],eVeta[i]-1i*eVeta[i-1]];
	}
else if(i<Nval&&evi[i]==evi[i+1]) 
	{// pair of complex eigenvalues with next one
	lambda = 1i*evr[i]+evi[i+1];
	[Modephi,Modeeta] = [1i*eVphi[i]-eVphi[i-1],eVeta[i]-1i*eVeta[i-1]];
	};


{
  cout << " VP numero " <<  i<< " : " << real(lambda) << "+i"<<imag(lambda) <<  endl;
  EV << evi[i] << "  "<< -evr[i] << " " << L << "  " << K0  << " " << Vol << "  " << dpdz << "   " << m  <<  endl;
}; 
  
    
// Post-traitement MODES
if (i<Nmodes)
   {
   	{
   	ofstream FileTXT(ffdatadir+"Eigenmode"+(i+1)+".txt");
   	FileTXT << eVphi[i][];
   	FileTXT << endl << endl << lambda << endl;
   	}
   
    SFWriteMode(ffdatadir+"Eigenmode"+(i+1)+".ff2m",Modephi,Modeeta,lambda);
       	
   };
}	
	
	// HACK for compatibility
	if(nev==1){ 
		exec("cp "+ffdatadir+"Eigenmode0.txt "+ffdatadir+"Eigenmode.txt");
		exec("cp "+ffdatadir+"Eigenmode0.ff2m "+ffdatadir+"Eigenmode.ff2m");
		};




