///
// THIS PROGRAM IS ADAPTED FROM Eigen_Bridge_Potential.edp from LiquidBridges++_V1.3
// imported in STABFEM project by D. Fabre on december 2017.
// STILL TO BE RATIONALIZED A LOT !!!


//  Computation of the eigenvalues and eigenvectors for oscillations of a liquid bridge
//  (inviscid theory)
// ----------------------------------------
// the problem is potential : u = i grad (phi) (mind the "i" factor !) 
// PROBLEM : find $\omega$ and $[phi,eta]$  such that
// 	$$ \Delta \phi = 0 $$ inside the domain
// 	$$ \omega \phi = \gamma (-(K0a^2+K0b^2) \eta - \partial^2 \eta / \partial s^2 + m^2/r^2 \eta $$ on the free surface
// 	$$ \omega \eta = grad \phi \dot n $$ on the free surface 
// 
//-----------------------------------------

// Remarque : phi et eta sont definis comme des champs P2 sur le volume, meme si eta n'a de sens qu'à la surface


include "Macros_StabFem.edp"

verbosity=0;

real zero=0;
// constantes physiques 
//real g=0;       // Gravity field
real gamma=1;	  // Surface Tension
real R=1;
real dpdz;


cout << "ENTREZ LA TENSION DE SURFACE GAMMA : "<< endl;
cin >> gamma;
if(gamma != 1){ 
	// TO BE MODIFIED !
	cout << "WARNING : PROGRAM HAS TO BE ADAPTED FOR GAMMA ~= 1"<< endl; 
	exit(-1);
	} ;


cout << "ENTREZ LE PARAMETRE DE GRAVITE dp/dz = rho g : "<< endl;
cin >> dpdz;



// Parametres du calcul
int m;  // Nombre d'onde

cout << " ENTREZ Le nombre d'onde m ?" << endl;
cin >> m;
cout << "==> Calcul des valeurs propres pour m = " << m << endl;

	
	real shiftr,shifti;	
	cout << " Enter SHIFT (re,im) :   " << endl; 
	cin  >> shiftr >> shifti;
	complex shift = 1i*shifti+shiftr;

	string symmetry;
	cout << " Symmetry properties ?? (A, S or N)" << endl;
	cin >> symmetry;

	string iadjoint; // 0 for direct ; 1 for adjoint
	cout << " Direct (D), Adjoint (A), or both+sensitivity (S) ?" << endl;
	cin >> iadjoint;	

	int nev;
    cout << " Enter nev ? (will use simple shift-invert if nev = 1)" << endl;
    cin >> nev ;
	int ncv = 4*nev;   ///// Krylov Basis

	string formulation;
	cout << "Formulation ?  [ A -> Absolute velocity in relative frame] [ R -> Relative velocity in relative frame]"<< endl; 
	cin >> formulation;
	
	cout << " ### PARAMETERS SELECTED : " << endl;
	cout << " shift = " << shift << endl;
	if (symmetry =="S") {cout << " Symmetric modes" << endl;}
		else if (symmetry =="A") {cout << " Antiymmetric modes" << endl;}	
		else if (symmetry =="N") {cout << " No symmetry axis" << endl;};	
	
	if (iadjoint =="D") {cout << " DIRECT PROBLEM" << endl;}
		else if (iadjoint =="A") {cout << " ADJOINT PROBLEM" << endl;}
		else if (iadjoint =="S") {cout << " DIRECT+ADJOINT PROBLEM INCLUDING SENSITIVITY" << endl;}
		else {cout << " ERROR WHEN SELECTING PROBLEM TYPE" << endl;};
	
	cout << " nev = " << nev << endl;
	


////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////


mesh th=readmesh(ffdatadir+"mesh.msh");
//mesh th=th; // autre nom possible...
mesh Shempty=emptymesh(th); 	// Maillage 'surface'
real L, K0, Vol, Area;

include "Macros_Geometrie_Surface.edp"

SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
// Calcul des normales et des courbures
CalcGeomSurf;


fespace Vh(th,P2);
fespace VhxVh(th,[P1,P1]);

VhxVh [phi,eta],[q,v];

real shift = 1e-12;  // value of the shift
real RegEta = 1e-8;

// CONSTRUCTION DES MATRICES

varf a([phi,eta],[q,v]) = // order of test fun. shoud be [v,q] for SLEPC ; [q,v] instead
// Laplacian	  
	  int2d(th)(  (dx(phi)*dx(v) + dy(phi)*dy(v)+(m^2+1e-8)*phi*v/(x^2+1e-30))*x  )  //try+ v*dx(phi)/(x+1e-8) ???
	  		// desingularisation term necessary if m=0 ; don't know why
// Curvature	  
	+ int1d(th,2)(((Ds(eta))*(Ds(q))-(K0a^2+K0b^2)*eta*q+m^2/(x^2+1e-30)*q*eta)*abs(x))
// gravity
	+ int1d(th,2)(dpdz*eta*q*N0z*x)
// shift 
	- int1d(th,2)(shift*(eta*v+q*phi)*x)
// Pour regulariser eta dans le volume
		+ int2d(th)((dx(q)*dx(eta)+dy(q)*dy(eta))*RegEta*abs(x)) //  deuxieme idee : laplacien 
// Conditions limites par penalisation
+ int1d(th,1,5)(1e30*eta*q*abs(x)) // pour ligne de contact fixee
+ int1d(th,1)(m*phi*v*1e30) // CL axe pour m different de 0

// CONDITION LIMITE DE DIRICHLET SUR PHI (supprime la condition de neumann orthogonale)
//+ int1d(th,6)(phi*v*1e30*abs(x)); //MARCHE
//+ on(6,phi=0.0); //NE MARCHE PAS
;



varf b([phi,eta],[q,v]) = 
        int1d(th,2)(eta*v*x)
       +int1d(th,2)(q*phi*x)
	//+ int1d(th,6)(phi*v*1e30*abs(x))
;

////////////////////////////////////////////////////
//
//  COUPLING OF MATRIX SYSTEMS
//  
/////////////////////////////////////////////////////

//MATRICE OF THE FLUID PROBLEM
matrix<complex> Afluid = a(VhxVh,VhxVh,solver=UMFPACK); 
matrix<complex> Bfluid = b(VhxVh,VhxVh,solver=GMRES,eps=1e-20);

//FORCE FLUID ON SPHERE, COMMENTS : p=-rho*dphi/dt=-omega*phi
varf bfluidvb([phi,eta],[q,v]) =
	int1d(th,6)(-2*N.y*phi);
complex[int] BFluidVB = bfluidvb(0,VhxVh);

//KINEMATIC CONDITIONS, COMMENTS : NO BASEFLOW => NO FLATTENING
varf bvbfluid([phi,eta],[q,v]) = int2d(th)(0);
complex[int] BVbFluid = bvbfluid(0,VhxVh);

complex[int] AVbFluid(phi[].n);
//if(formulation=="A")
//{
	varf avbfluid([phi,eta],[q,v]) = int1d(Th,6)(N.y*v);  
	AVbFluid = avbfluid(0,VhxVh);
//};
//
//if(formulation=="R")
//{
//	varf avbfluid([phi,eta],[q,v]) = int1d(Th,6)(0)
//	- int2d(Th)(0);  
//		AVbFluid = avbfluid(0,VhxVh);
//};

//COUPLED SYSTEM
matrix<complex> A = [
		[Afluid,AVbFluid,0],
		[0,0,0],
		[0,1,0]
		];

matrix<complex> B = [
		[BFluid, BVbFluid,0],
		[BFluidVB,MASS,0],
		[0,0,1]
		];

matrix<complex> OP;
complex shiftOP;
shiftOP = shift;
OP = A + (-shiftOP)*B;

////////////////////////////////////////////////////
//
//  RESOLUTION DU PB AUX VALEURS PROPRES
//
//  Important warning : here the computed eigenvalues correspond to omega = lambda/i !
//  
/////////////////////////////////////////////////////

// TO MODIFY CONSEQUENTLY 

if(nev>1)
/// SOLUTION AND POSTPROCESSING FOR NEV>1 (built-in eigenvalue solver)
{

cout << "BIG WARNING : Nev>1 case not yet handled here !" << endl;
real zero = 0;
cout << 1/zero;
/*

////// BUILD OP-MATRIX=A-sigma*B //////////////////////////////////////////////////////////////
//if(iadjoint=="D")
//{

//}
//else if(iadjoint=="A")
//{
//OP=LNSEadjoint(XXMh,XXMh,solver=sparsesolver);
//shiftOP = conj(shift);
//}
//else if(iadjoint=="S")
//{
//cout << " WARNING : in this program option S will work only for nev=1" << endl;
//};

////////////////////////////////////////////////////////////////////////////////////


complex[int] ev(nev);                     ////// vector to store eigenvalues
XXMh<complex> [int] [eu1,eu2,eup](nev);   ////// vector to store EIGENVECTORS 

complex[int,int] EVectors(u1[].n+2,nev); 

///////////////////// CALL TO ARPACK++ ////////////////////////////////// //////////
//int k=EigenValue(OP,B,sigma=shiftOP,value=ev,vector=EVectors,tol=1e-6,maxit=0,ncv=ncv);    //Arpack call



//if(iadjoint=="A") { ev = conj(ev); } ;
////////////////////////////////////////////////////////////////////////////////////


	fespace p1(Th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
    p1<complex> ux1,uy1,pp1,vort1;
	
    string namefile;
    
    if(iadjoint=="D"){namefile="Eigenvalues.txt";}
    else {namefile="EigenvaluesA.txt";};
    
    real Vb,Xb;
    ofstream fileVP1(namefile); 
	for (int i=0;i<nev;i++)
	{
       fileVP1 << real(ev[i]) << " " << imag(ev[i]) << " " << Re << " " << 0 << " " << real(shift) << " " << imag(shift) << endl;
       	cout << " valeur propre : " << i+1 << "  : " << ev[i] << endl;
		{
 		 if(iadjoint=="D"){namefile="Eigenmode"+(i+1)+".ff2m";}
 		 else{namefile="EigenmodeA"+(i+1)+".ff2m";};
 		 cout << "Writing eigenmode in file " << namefile << endl;
 		 ofstream file(namefile);
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "EIGENMODE for the flow around a 2D cylinder" << endl;
    	 file << "Format :" << endl;
	     file << "real Re  complex sigma complex shift P1c ux1 P1c uy1 P1c p1 P1c vort1 complex Xbody complex Vbody" << endl << endl ; 
		 file << Re  << endl << real(ev[i]) << " " << imag(ev[i]) << " " << shiftr << " " << shifti << endl << endl;
// 		[u1[],Vb,Xb] = EVectors(:,i); does not work
 		ux1 = u1 ; 
 		uy1 = u2 ;
 		pp1 = p1;
// 		ux1=eu1[i];
//		uy1=eu2[i];
//		pp1=eup[i];
		vort1=dy(u1)-dx(u2);
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
		};
	};
	cout << "it's done" << endl;
	*/
}



////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////


//else

/// SIMPLE SHIFT-INVERT IF ONLY ONE MODE IS RESQUESTED
//{
VhxVh<complex> [phi0,eta0],[phidirect,etadirect],[phiadjoint,etaadjoint]; 

int testCB = exec("ls Eigenmode_guess.txt");
    	if (testCB!=0)
		{
		cout << "no file Eigenmode_guess.txt : starting from arbitrary initial condition" << endl;
		[phi0,eta0] = [1,0];
		} 
		else
		{
		cout << "starting shift/invert from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin("Eigenmode_guess.txt");
		cbin >> phi0[];
		};


// selection of the computation to be performed : direct, adjoint or both
		
int directadjointA,directadjointB;
if(iadjoint=="D")
	{
	directadjointA = 1; directadjointB=1;
	cout << "Shift-invert algorithm for DIRECT problem" << endl;
	}
else if(iadjoint=="A")
	{
	directadjointA = 2; directadjointB=2;
	cout << "Shift-invert algorithm for ADJOINT problem" << endl;
	}
else if(iadjoint=="S")
	{
	directadjointA = 1; directadjointB=2;
	cout << "Shift-invert algorithm for BOTH DIRECT AND ADJOINT problem" << endl;
	};
	

// LOOP TO SELECT WHICH COMPUTATION WILL BE DONE 
	for(int directadjoint=directadjointA;directadjoint<directadjointB+1;directadjoint++)	
	{

	if(directadjoint==1)
	{
		cout << " Constructing operator for DIRECT problem ..." << endl;
		//OP=LNSE(XXMh,XXMh,solver=sparsesolver);
		shiftOP = shift;
		cout << " solving DIRECT problem ..." << endl;
	}
	else if(directadjoint==2)
	{
		cout << " Constructing operator for ADJOINT problem ..." << endl;
		//OP=LNSEadjoint(XXMh,XXMh,solver=sparsesolver);
		shiftOP = conj(shift)+1/zero; /// to force an error !
		cout << "solving ADJOINT problem ..." << endl;
		cout << 1/zero;
	};


	int itmax = 100;
	complex sigma0 = 1e6;
	real err = 1e6;
	real errmax=1e-6;
	complex sigma;
	
//	varf brhs([u1,u2,p],[v1,v2,q]) = int2d(Th)( (u10*v1+u20*v2) );
	set(OP,solver=sparsesolver);  //// factorize matrix

	complex Vb0=0; complex Xb0=0;
	
	complex Vb,Xb;
	
	/// ITERATION LOOP
	int i;
	for (i=0; ((err>errmax)&&(i<itmax)); i++)
	{
    	complex[int] X0 = [phi0[],Vb0,Xb0];
    	complex[int] rhs= B*X0;  //////// see freefem++doc.pdf for the solver 
		complex[int] X = OP^-1*rhs;
		[phi[],Vb,Xb] = X;

		complex XnXn1 = int2d(Th)(phi0*phi+eta0*eta)+Vb0*Vb+Xb0*Xb;
		complex Xn1Xn1 = int2d(Th)(phi*phi+eta*eta)+Vb*Vb+Xb*Xb;
		complex GG = Xn1Xn1/XnXn1;
		// at each step the inverse shifted eigenval. is approximated by <X_{n+1}, Y> / <X_n, Y>
		//      ( the choice Y = X_{n+1} is convenient but we could choose something else )
		sigma = shiftOP+1/GG;
		err = abs(sigma-sigma0);
		cout << " iteration " << i+1 << " : " << endl;	
		//	cout << " GG = " << GG << endl;
		//	cout << " XnXn = " << XnXn << endl;
		cout << " estimated eigenvalue sigma = " << sigma << endl;	
	
		phi0[] = 1/sqrt(abs(Xn1Xn1))*phi[];
		Vb0 = 1/sqrt(abs(Xn1Xn1))*Vb;
		Xb0 = 1/sqrt(abs(Xn1Xn1))*Xb;
		sigma0 = sigma;
	};
	/// END ITERATION LOOP	
	if(directadjoint==2){sigma=conj(sigma);};
 	// renormalization by MAXIMUM
 	Vh NormU = sqrt(abs(phi)^2+abs(eta)^2);
	phi[] = 1/NormU[].max*phi[];
	Vb = 1/NormU[].max*Vb;
	Xb = 1/NormU[].max*Xb;
	 
	if(i<itmax)
	// post-processing if iteration was successful
	{	
		real sigmar = real(sigma) ; real sigmai = imag(sigma);
		string namefile,namefileFF,descriptionFF;
    	if(directadjoint==1)
    	{
    		ofstream file("Eigenvalues.txt");
    		file << sigmar << " " << sigmai << " " << Re <<  " " << real(shift) << " " << imag(shift) << endl;
    		namefile="Eigenmode.txt";
    		namefileFF="Eigenmode.ff2m";
    		descriptionFF="real Re  complex sigma complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1 complex Vb complex Xb"; //problem???
    	};
    	if(directadjoint==2)
    	{
    		ofstream file("EigenvaluesA.txt");
           	file << sigmar << " " << sigmai << " " << Re << " " << real(shift) << " " << imag(shift) << endl;
    		namefile="EigenmodeA.txt";
    		namefileFF="EigenmodeA.ff2m";
    		descriptionFF="real Re  complex sigma complex shift int iter P1c ux1Adj P1c uy1Adj P1c p1Adj P1c vort1Adj complex VbAdj complex XbAdj";
    	};

	if(iadjoint=="S"&&directadjoint==1)
		{
			phidirect[]=phi[];
		};
	if(iadjoint=="S"&&directadjoint==2)
		{
			cout << " toto" << endl;
			phiadjoint[]=phi[];
		};
    
    {
    ofstream file(namefile);
  	file << phi[] ;	
   	file << endl << endl << Re << endl
   	<< endl << sigmar << "   " << sigmai  << endl;
    }
    
	fespace p1(th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
	p1<complex> phi,eta;

 		 cout << "Writing eigenmode in file " << namefileFF << endl;
 		 ofstream fileFF(namefileFF);
 		 fileFF << "### Data generated by Freefem++ ; " << endl;
    	 fileFF << "EigenMode" << endl;
    	 fileFF << "Format :" << endl;
	     fileFF << descriptionFF << endl << endl ; 
		 fileFF << Re  << endl << real(sigma) << " " << imag(sigma)  
		 << " " << shiftr << " " << shifti << " " << i << endl << endl;
		for (int j=0;j<phi[].n ; j++) fileFF << real(phi[][j]) << " " << imag(phi[][j]) << endl;
		for (int j=0;j<phi[].n ; j++) fileFF << real(eta[][j]) << " " << imag(eta[][j]) << endl;
		fileFF << real(Vb) << " " << imag(Vb) << endl;
		fileFF << real(Xb) << " " << imag(Xb) << endl;

cout << " Vb : " << 		Vb << endl;
p1 realphi = real(phi);
plot(realphi,fill=1,value=1);
	
} // end of post processing of simple shift-invert case
else // case iteration failed
{
	cout << " ERROR : shift-invert iteration failed ; shift is probably wrong" << endl;
//	exec("rm Eigenmode.txt");
//	exec("rm EigenmodeA.txt");
	//exec("rm Eigenmode.ff2m");
	//exec("rm EigenmodeA.ff2m");
	{string namefileFF="Eigenmode.ff2m";
 	ofstream fileFF(namefileFF);
 		 fileFF << "### Data generated by Freefem++ ; " << endl;
    	 fileFF << "EIGENMODE for a 2D flow" << endl;
    	 fileFF << "Format :" << endl;
	     fileFF << "int iter" << endl << endl ; 
		 fileFF << -1 << endl;}
	exec("cp Eigenmode.ff2m EigenmodeA.ff2m");
	{ofstream file("Eigenvalues.txt");
    		file << " 0 0 0 0 0 " << endl;}
	exec("cp Eigenvalues.txt EigenvaluesA.txt");    		

};


if (testCB==0)
		{
		exec("rm Eigenmode_guess.txt");// to be sure this file is not reused unless explicitly requested
		};


}; //end of loop for direct/adjoint/selection

if(iadjoint=="S")
//
{
cout << "Computation of sensitivity after direct and adjoint" << endl;

//	cout << "STAT" << u1direct(2.5,.5) << " " << u1adjoint(2.5,.5) << " " << u2direct(2.5,.5) << " " << u2adjoint(2.5,.5) << endl ;

	fespace p2(Th,P2);
	fespace p1(Th,P1);

	p2 sensitivity = sqrt(abs(u1adjoint)^2+abs(u2adjoint)^2) * sqrt(abs(u1direct)^2+abs(u2direct)^2);
	// at this stage [u1,u2,p] is the last computed, namely the adjoint eigenmode
//	real norm = abs(int2d(Th)(u1adjoint*u1direct+u2direct*u2adjoint));
	real norm = sensitivity[].max;
	sensitivity=1/norm*sensitivity;
	
//	cout << "STAT" << u1direct(2.5,.5) << " " << u1adjoint(2.5,.5) << " " << u2direct(2.5,.5) << " " << u2adjoint(2.5,.5) << endl ;

	
	string namefile,namefileFF;
    namefile="Sensitivity.txt";
    {
    ofstream file(namefile);
  	file << sensitivity[] ;	
    }    
    namefileFF="Sensitivity.ff2m";
	p1 xx,yy,sensitivityP1;
	xx=x;
	yy=y;
    sensitivityP1 = sensitivity;
     ofstream fileFF(namefileFF);
 		 fileFF << "### Data generated by Freefem++ ; " << endl;
    	 fileFF << "EigenMode D+A+S" << endl;
    	 fileFF << "Format :" << endl;
	     fileFF << "P1 sensitivity" << endl << endl ;
		 for (int j=0;j<sensitivityP1[].n ; j++) fileFF << sensitivityP1[][j] << endl;




}; // end of selection of mutliple mode (krylov) / single mode (simple shift-invert)


//};


