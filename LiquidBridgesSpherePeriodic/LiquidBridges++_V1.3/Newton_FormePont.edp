
verbosity = 0; // bavardage a l'ecran
 real intwait = 0; // 1 si l'on veut des traces intermediaires


// Calcul de la forme d'equilibre d'un pont liquide axisymetrique


// Parametres :
real Rbase = 1; // On prend le rayon du tube capillaire comme echelle de longueur (eviter de changer !)

// La forme d'equilibre correspond a  K0 = constante
// La methode consiste a deformer iterativement la forme 
// de la surface jusqu'a aboutir a cet equilibre.

// Remarque : la forme est parametree par la courbure K0, donc la methode ne
// marche pas au voisinage d'un extremum de K0... 
// (dans ce cas utiliser Newton_FormePont_Volume)

// La forme initiale est lue dans le fichier "MeshBridge_guess.msh". 


real K0;
cout << " ENTREZ LA VALEUR DE LA Courbure ?" << endl;
cin >> K0;
cout << "==> Courbure = " << K0 << endl;

real dpdz;
cout << " ENTREZ LA VALEUR Du Bond inverse (delta rho g R^2)/(sigma)  " << endl;
cin >> dpdz;
cout << "==> dpdz = " << dpdz << endl;






////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////


mesh MeshInt=readmesh("MeshBridge_guess.msh");
//mesh Shempty=emptymesh(MeshInt); 	// Maillage 'surface'

mesh Shempty=MeshInt;

include "Macros_Geometrie_Surface.edp"

// Calcul des normales et des courbures
CalcGeomSurf;

// Plots
ExtendC;
plot(K0ext,[N0r,N0z],fill=1,value=1,wait=intwait,cmm="Normales de la forme initiale et Courbure K0 prolongee dans le plan");
// plot(K0ext,fill=1,value=1,wait=0,cmm="Courbure K0 prolongee dans le plan");





////////////////////////////////////////////////////////////////
//
// ALGORITHME DE NEWTON
//
////////////////////////////////////////////////////////////////




real Res=1, Res1=2;
int Itmax = 15;
int conv=1, conv1=1, conv2=1;

for(int i = 0; (i<Itmax)&(Res>1e-10); i++)
{
// Calcul de la deformation de surface et deplacement du maillage

CalcEta;
 ExtendEta; plot(etaext,fill=1,value=1,wait=intwait,cmm="Eta prolonge iteration "+i); //(pour visualisation)

CalcDef;
plot([ur,uz],fill=1,value=1,wait=intwait,cmm="champ de deformation calcule iteration "+i);

MeshInt = movemesh(MeshInt,[x+ur,y+uz]);
plot(MeshInt,Shempty,cmm="Deformation maillage iteration "+i,wait=intwait);
Shempty = emptymesh(MeshInt);

// Recalcul des normales et courbures
CalcGeomSurf;



ExtendC;
K0ext = K0ext-(K0-dpdz*y);
plot(K0ext,fill=1,value=1,cmm="Erreur courbure iteration "+i,wait=intwait);
Res = int1d(Shempty,2)( (K0a+K0b-(K0-dpdz*y))^2 );
cout << " iteration " << i << " : Res = " << Res << endl;

// verif convergence
conv = (Res<Res1); // on verifie si l'erreur diminue au cours des 3 dernieres iterations
Res1 = Res;
conv2=conv1;
conv1=conv;
}

//  ----------------------------------------------------------------------------------------------------
// Fin du Newton 
//  ----------------------------------------------------------------------------------------------------

cout << endl << " ------- NEWTON TERMINE -------" << endl << endl;
cout << "Criteres de convergence = " << conv << " " << conv1 << " " << conv2 << endl;
// Ecriture du maillage dans un fichier


if (conv*conv1*conv2==0)
{ 
cout << "ATTENTION : convergence du Newton douteuse..." << endl;
savemesh(MeshInt,"MeshBridge_NoConv.msh");
savemesh(MeshInt,"MeshBridge.msh");
}
else
{	
cout << "solution convergee : on copie le maillage dans MeshBridge_guess.msh" << endl;
 savemesh(MeshInt,"MeshBridge.msh");
 savemesh(MeshInt,"MeshBridge_guess.msh");
};

////////////////////////////////////////////////////////////////
//
// POST-TRAITEMENT : fichiers Infos_Geom.txt et Geom_Surface.txt
//
////////////////////////////////////////////////////////////////


// Construction de vecteurs contenant les points de la surface numerotes (cf. macro)  

SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface);


// ##################  ECRITURE D'un fichier contenant la geometrie de la surface ############ 
real LongueurSurface = S0PointSurf(Nsurface);
ofstream filegeom("Geom_Surface.txt") ; // format : s0 x y K0a K0b N0r N0z,  ds(K0a K0b N0r N0z)
// (Rem. abcisse s0 comptee a partir du sommet)
	PP1 dsN0r = Ds(N0r);
	PP1 dsN0z = Ds(N0z);
	PP1 dsK0b = Ds(K0a);
	PP1 dsK0a = Ds(K0b);
for(int ksurf=Nsurface;ksurf>-1;ksurf--) 
	{
	filegeom << S0PointSurf(ksurf) << "   " << xPointSurf(ksurf) << "  "  << yPointSurf(ksurf) << "   " 
	<< K0a(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   " << K0b(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   "
	<< N0r(xPointSurf(ksurf), yPointSurf(ksurf) )<< "   " << N0z[][IndexPointSurf(ksurf)  ] << "   " 
	<< dsK0a(xPointSurf(ksurf), yPointSurf(ksurf) )<< "   " << dsK0b(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   "
	<< dsN0r(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   " << dsN0z(xPointSurf(ksurf), yPointSurf(ksurf) ) << endl ;
	};
//



// Calcul de diverses quantites interessantes
real Vol = 2*pi*int2d(MeshInt)(x); // Volume
real Area = 2*pi*int1d(MeshInt,2)(x); // Surface
real Rmax = xPointSurf(0:Nsurface).max;
real Rmin = xPointSurf(0:Nsurface).min;
real Zmax = yPointSurf(0:Nsurface).max;
real Zmin = yPointSurf(0:Nsurface).min;
real Z1 = yPointSurf(0);
real Z2 = yPointSurf(Nsurface);
real L = Z2-Z1;


cout << " ####### STATISTIQUES sur la forme : " << endl << endl;
cout << " ## Longueur                        : " << L << endl;
cout << " ## gradient pression adim (Bo^-1)  : " << dpdz << endl;
cout << " ## Volume                          : " << Vol << endl;
cout << " ## Volume / Volume cyl             : " << Vol/(pi*L*Rbase^2) << endl;
cout << " ## Courbure                        : " << K0 << endl;
cout << " ## SURFACE                         : " << Area << endl;
cout << " ## Rmax                            : " << Rmax << endl;
cout << " ## Rmin                            : " << Rmin << endl;
cout << " ## Zmax                            : " << Zmax << endl;
cout << " ## Zmin                            : " << Zmin << endl;
cout << endl;


// fichier info geom
{
ofstream fileG("Infos_Geom.txt");
fileG.scientific;
fileG << L << " " ; 
fileG << Vol/(pi*L*Rbase^2) << " " ;
fileG << K0 << " " ; 
fileG << dpdz << " " ;
fileG << Area << " ";
fileG << Zmin << " " ; 
fileG << Zmax << " " ; 
fileG << Rmin << " " ; 
fileG << Rmax << " ";
fileG <<  endl ; 
fileG << "### Infos geometrie : L Vol' K0 dpdz Area Zmin Zmax Rmin Rmax" << endl;
};







cout << endl << "The end..." << endl << endl;
