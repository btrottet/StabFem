// OUTILS ET MACROS POUR LA GEOMETRIE DE LA SURFACE LIBRE
//
// script a inclure dans le code principal juste apres une declaration des maillages : 
//
//	MeshInt = maillage principal 
// 	(axe en x=r=0, label 1)
// 	(surface libre label 2)
// 	(parois solides label 5 et 6)
//	(reserver le label 3 pour un plan de symetrie)
// 
//      Shempty = emptymesh construit sur le prÈcÈdent
//
// Attention : ne pas mettre de commentaires au milieu des macros !



////////////////////////////////////////////////////////////////
//
// CHAPITRE 0 : DECLARATIONS
//
////////////////////////////////////////////////////////////////



fespace Wh1(Shempty,P1);
Wh1 N0r,N0z,T0r,T0z,K0a,K0b,test,NormN;
fespace Vh(MeshInt,P1);

fespace PP1(Shempty,P1);
int nbboundaryelements = Shempty.nbe;
int[int]  IndexPointSurf(nbboundaryelements+1); // Index du sommet dans la numérotation générale
real[int] xPointSurf(nbboundaryelements+1); 
real[int] yPointSurf(nbboundaryelements+1);
real[int] S0PointSurf(nbboundaryelements+1);
// for new method
real[int] dS0PointSurf(nbboundaryelements+1);
real[int] alphaPointSurf(nbboundaryelements+1);
real[int] K0aPointSurf(nbboundaryelements+1);
real[int] K0bPointSurf(nbboundaryelements+1);
int Nsurface;

////////////////////////////////////////////////////////////////
//
// CHAPITRE 1 : OUTILS POUR CALCULER LES NORMALES ET COURBURES
//
////////////////////////////////////////////////////////////////


// Macros : derivees curvilignes le long de la surface pour un scalaire et un vecteur
macro Ds(u1)
(dx(u1)*T0r+dy(u1)*T0z)
//

macro Ds2(u1,u2)
[dx(u1)*T0r+dy(u1)*T0z,dx(u2)*T0r+dy(u2)*T0z]'*[T0r,T0z]
//

macro Dn(u1)
(dx(u1)*N0r+dy(u1)*N0z)
//



// Definitions des problemes pour calcul normale, courbure
problem CalcN0r(N0r,test)=
  int1d(Shempty,2,qfe=qf3pE)(N0r*test*x)
  -int1d(Shempty,2,qfe=qf3pE)(N.x*test*x)
//  +int1d(Shempty,5,6,qfe=qf3pE)(dx(N0r)*test)
  +int2d(Shempty)((dx(N0r)*dx(test)+dy(N0r)*dy(test))*1e-8*x);
  
//    +int1d(Shempty,5,6,qfe=qf3pE)(N0r*test*x);
//    +int1d(Shempty,5,6,qfe=qf3pE)(+test*(x-1)/2*x);

problem CalcN0z(N0z,test)=
  int1d(Shempty,2,qfe=qf3pE)(N0z*test)
//  +int1d(Shempty,5,6,qfe=qf3pE)(dx(N0z)*test)
  -int1d(Shempty,2,qfe=qf3pE)(N.y*test)
  +int2d(Shempty)((dx(N0z)*dx(test)+dy(N0z)*dy(test))*1e-30);
  
//   +int1d(Shempty,5,6,qfe=qf3pE)(N0z*test)
//    +int1d(Shempty,5,6,qfe=qf3pE)(-test*(y-1)/(abs(y-1)*(1-(x-1)^2/8)+1e-10));



 
// Courbure : composante dans le plan medidien K0a et dans le plan perpendiculaire K0b 
//problem CalcK0a(K0a,test)=
//   int1d(Shempty,2,qfe=qf3pE)(K0a*test)
// + int2d(Shempty)(1e-10*K0a*test)
// - int1d(Shempty,2,qfe=qf3pE)(Ds2(N0r,N0z)*test);

problem CalcK0a(K0a,test)=
   int1d(Shempty,2,qfe=qf3pE)(K0a*test)
   +int2d(Shempty)((dx(K0a)*dx(test)+dy(K0a)*dy(test))*1e-30)
// + int2d(Shempty)(1e-30*K0a*test)
 - int1d(Shempty,2,qfe=qf3pE)(Ds2(N0r,N0z)*test)
 
// - int1d(Shempty,2,qfe=qf3pE)(.5*test)
 
 
 + int1d(Shempty,5,6)(K0a*test) - int1d(Shempty,5,6)(.5*test)
 ;


/// Modif avec laplacien


problem CalcK0b(K0b,test)=
   int1d(Shempty,2,qfe=qf3pE)(K0b*test)
  +int2d(Shempty)((dx(K0b)*dx(test)+dy(K0b)*dy(test))*1e-30)
// + int2d(Shempty)(1e-10*K0b*test)
 - int1d(Shempty,2,qfe=qf3pE)(N0r/x*test);








// MACRO GLOBALE : ANCIENNE METHODE (la nouvelle est reportee au bout)
macro CalcGeomSurfANS
CalcN0r;
CalcN0z;
plot(N0r,wait=1,value=1);
plot(N0z,wait=1,value=1);
NormN = sqrt(N0r^2+N0z^2)+1e-10;
N0r = N0r/NormN;
N0z = N0z/NormN;
T0r = N0z;
T0z = -N0r;
CalcK0a;
CalcK0b;
plot(K0a,wait=1,value=1);
plot(K0b,wait=1,value=1);
cout << "max K0a : " << K0a[].max << " " << K0a[].min <<endl; 
//EOM
//


////////////////////////////////////////////////////////////////
//
// CHAPITRE 2 : OUTILS POUR DEFORMATION DE MAILLAGE (Newton)
//
////////////////////////////////////////////////////////////////



// Prolongement de la courbure dans le plan (pour la visualisation uniquement)
Vh K0ext,dK0ext;
problem ExtendC(K0ext,dK0ext)=
    int2d(MeshInt)((dx(K0ext)*dx(dK0ext)+dy(K0ext)*dy(dK0ext)))
+on(2,K0ext=(K0a+K0b))
//+on(1,5,6,K0ext=K0)
;
// Usage : ExtendC; plot(K0ext,fill=1,value=1,wait=1,cmm="Courbure K0 prolongee dans le plan");


// Calcul de la deformation de surface libre necessaire pour corriger la courbure du maillage (a pression imposee)
// ANCIENNE METHODE  : formulation variationelle
Wh1 etaNewton ;
problem CalcEta(etaNewton,test) = int1d(Shempty,2)(((K0a+K0b)-(K0-dpdz*y))*test*abs(x)) 
                    + int1d(Shempty,2)(((Ds(etaNewton))*(Ds(test))  -(K0a^2+K0b^2)*etaNewton*test +dpdz*etaNewton*test*N0z)*abs(x))
		    + int2d(Shempty)(1e-20*etaNewton*test)
		    +on(1,5,6,etaNewton=0);
		    
// Nouvelle methode avec macro
macro CalcEtaNEW
cout << " toto" ;
// EOM		    
		    
		    
// Calcul de la deformation de surface libre necessaire pour corriger la courbure du maillage (a volume impose)	
// A REVOIR	   
macro CalcEtaV(etaNewton,K1,V)
{
varf MatEta(etaNewton,test) = 
    int1d(Shempty,2)(((Ds(etaNewton))*(Ds(test))  -(K0a^2+K0b^2)*etaNewton*test)*abs(x))
  + int2d(Shempty)(1e-20*etaNewton*test)
  + on(1,5,6,etaNewton=0);	
varf MatEtaRHS(etaNewton,test) = 
	int1d(Shempty,2)(-((K0a+K0b)-K0)*test*abs(x));		    
varf VecEta(etaNewton,test) = int1d(Shempty,2)(-test*abs(x));
varf VecVol(etaNewton,test) = int1d(Shempty,2)(test*abs(x));
matrix A11 = MatEta(Wh1,Wh1); 
real[int] A12 = VecEta(0,Wh1); 
real[int] A21p = VecVol(0,Wh1); 
real A22 = 0;
matrix A = [[A11, A12],[A21p',A22]];
set(A,solver=sparsesolver);
real[int] RHS1 = MatEtaRHS(0,Wh1);
real RHS2 = V-int2d(MeshInt)(x); 
real[int] RHS = [RHS1,RHS2];
real[int] xx = A^-1 * RHS;
[etaNewton[],K1] = xx;
}
//EOM


		    
		    
		     
// Prolongement de la deformation dans le domaine (pour visualisation uniquement)
Vh etaext;
problem ExtendEta(etaext,dK0ext) =
    int2d(MeshInt)((dx(etaext)*dx(dK0ext)+dy(etaext)*dy(dK0ext)))
+on(2,etaext=etaNewton);

// Calcul du champ lagrangien pour deformation de maillage
fespace Vh11(MeshInt,[P1,P1]);
Vh11 [uz,ur], [vz,vr];
problem CalcDef([uz,ur],[vz,vr])=
    int2d(MeshInt)( (dx(uz)*dx(vz)+dy(uz)*dy(vz)) + (dx(ur)*dx(vr)+dy(ur)*dy(vr)) )
+on(2,ur=etaNewton*N0r,uz=etaNewton*N0z)
+on(1,5,6,ur=0,uz=0);







////////////////////////////////////////////////////////////////
//
// CHAPITRE 3 : OUTILS POUR EXTRACTION DE VALEURS LE LONG DE LA SURFACE
//
////////////////////////////////////////////////////////////////




macro SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface)
{
int ksurf = 0;
for(int k=0;k<nbboundaryelements;k++)
{
	if(Shempty.be(k).label==2) 
	{
	if (ksurf==0){IndexPointSurf(ksurf) = Shempty.be(k)[0];}
	else{if(IndexPointSurf(ksurf) !=Shempty.be(k)[0]){cout << "WARNING probleme numeration de la surface !" << endl;}}
	IndexPointSurf(ksurf+1) = Shempty.be(k)[1];	
	ksurf++;
	}
}
Nsurface = ksurf; 
for(ksurf=0;ksurf<Nsurface+1;ksurf++)
  {
	xPointSurf(ksurf) = Shempty(IndexPointSurf(ksurf)).x;
	yPointSurf(ksurf) = Shempty(IndexPointSurf(ksurf)).y;
	if(ksurf>0)
				{ S0PointSurf(ksurf) = S0PointSurf(ksurf-1) 
	+ sqrt((xPointSurf(ksurf-1)-xPointSurf(ksurf))^2+(yPointSurf(ksurf-1)-yPointSurf(ksurf))^2);
	dS0PointSurf(ksurf-1) = sqrt((xPointSurf(ksurf-1)-xPointSurf(ksurf))^2+(yPointSurf(ksurf-1)-yPointSurf(ksurf))^2);	
	            }
	            else{S0PointSurf(0)=0;};
  }
	for(ksurf=1;ksurf<Nsurface;ksurf++)
	  {
	  alphaPointSurf(ksurf) = (dS0PointSurf(ksurf)*atan2(yPointSurf(ksurf)-yPointSurf(ksurf-1),xPointSurf(ksurf)-xPointSurf(ksurf-1)) 
	                    +  dS0PointSurf(ksurf-1)*atan2(yPointSurf(ksurf+1)-yPointSurf(ksurf),xPointSurf(ksurf+1)-xPointSurf(ksurf)))
	                    /(dS0PointSurf(ksurf-1)+dS0PointSurf(ksurf))-pi/2;
	  K0aPointSurf(ksurf) = (atan2(yPointSurf(ksurf+1)-yPointSurf(ksurf),xPointSurf(ksurf+1)-xPointSurf(ksurf)) 
	                    -  atan2(yPointSurf(ksurf)-yPointSurf(ksurf-1),xPointSurf(ksurf)-xPointSurf(ksurf-1)))
	                    /(dS0PointSurf(ksurf-1)+dS0PointSurf(ksurf))*2;
	  K0bPointSurf(ksurf) = cos(alphaPointSurf(ksurf))/xPointSurf(ksurf);
	  }                 
	  alphaPointSurf(0)=2*alphaPointSurf(1)-alphaPointSurf(2);
	  K0aPointSurf(0)=2*K0aPointSurf(1)-K0aPointSurf(2);
	  K0bPointSurf(0)=2*K0bPointSurf(1)-K0bPointSurf(2);
	  alphaPointSurf(Nsurface)=2*alphaPointSurf(Nsurface-1)-alphaPointSurf(Nsurface-2);
	  K0aPointSurf(Nsurface)=2*K0aPointSurf(Nsurface-1)-K0aPointSurf(Nsurface-2);
	  K0bPointSurf(Nsurface)=2*K0bPointSurf(Nsurface-1)-K0bPointSurf(Nsurface-2);
}
//EOM


// MACRO GLOBALE : NOUVELLE METHODE
macro CalcGeomSurf
SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface);
for(int ksurf=0;ksurf<Nsurface+1;ksurf++)
{
	K0a = K0a;
	K0b = K0b;
	N0r = N0r;
	N0z = N0z;
K0a[][IndexPointSurf(ksurf)  ] = K0aPointSurf(ksurf);
K0b[][IndexPointSurf(ksurf)  ] = K0bPointSurf(ksurf);
N0r[][IndexPointSurf(ksurf)  ] = cos(alphaPointSurf(ksurf));
N0z[][IndexPointSurf(ksurf)  ] = sin(alphaPointSurf(ksurf));
}
T0r = N0z;
T0z = -N0r;
plot([N0r,N0z],wait=1,value=1,cmm=" CalcGeom : Normale");
plot(Shempty,K0a,wait=1,value=1,cmm="CalcGeom : K0a");
plot(K0b,wait=1,value=1,cmm="CalcGeom : K0b");
//EOM



