

/// CECI EST UN SCRIPT FREEFEM ECRIT EN... FREEFEM
// (on pourrait aussi faire en bash, en matlab voire en pythonâ€¦.)


//	string ff ="/PRODCOM/FREEFEM/suse-11.2/3.10/bin/FreeFem++";
	string ff ="FreeFem++";

	real L = 6;
	int  d = 45;
	real Rmax = 1.;
	int m=0;
	real dpdz = 0;
	
	/*

	// creation mesh initial cylindrique
	exec("echo ' 0 "+L+" "+d+"' | "+ff+"-nw -v 0 MeshInit.edp > OUT");
	//
	
	// boucle sur K0 pour valeurs croissantes 
	for (real K0=1 ; K0<1.3; K0=K0+.04)
	{
	exec("echo '"+K0+" "+dpdz+" " +0+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
	exec("cat Infos_Geom.txt >> Geom_Ponts_L"+L+".dat");
	exec("echo 0 | "+ff+"-nw -v 0 Eigen_Bridge_Potential.edp");
	exec("cat spectrum.dat >> Eigen_Ponts_L"+L+"_m"+m+".dat");
	};	

	*/
	
	
	

	
	//

	// boucle sur K0 pour valeurs decroissantes  jusqu'a .7
	exec("echo ' 0 "+L+" "+d+"' | "+ff+"-nw -v 0 MeshInit.edp > OUT");
	for (real K0=1 ; K0>.7; K0=K0-.02)
	{
	exec("echo '"+K0+" "+dpdz+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
	exec("cp MeshBridge.msh MeshBridge_guess.msh");
	exec("cat Infos_Geom.txt >> Geom_Ponts_L"+L+".dat");
	exec("echo '"+m+"' | "+ff+"-nw -v 0 Eigen_Bridge_Potential.edp");
	exec("cat spectrum.dat >> Eigen_Ponts_L"+L+"_m"+m+".dat");

	};	
	
	// zoom sur l'intervalle .7 -> 0.45
	// on repart d'un maillage bombe pour explorer cette branche
	Rmax = 3;
	exec("echo ' 3 "+L+" "+d+" "+2.+"' | "+ff+"-nw -v 0 MeshInit.edp > OUT");

for (real K0=.7 ; K0>.4; K0=K0-.05)
	{
	exec("echo '"+K0+" "+dpdz+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
	exec("cp MeshBridge.msh MeshBridge_guess.msh");
	exec("cat Infos_Geom.txt >> Geom_Ponts_L"+L+".dat");
	exec("echo '"+m+"' | "+ff+"-nw -v 0 Eigen_Bridge_Potential.edp");
	exec("cat spectrum.dat >> Eigen_Ponts_L"+L+"_m"+m+".dat");
	};


	// zoom sur l'intervalle .7 -> 0.9
	// on repart d'un maillage bombe pour explorer cette branche
	Rmax = 3;
	exec("echo ' 3 "+L+" "+d+" "+2.+"' | "+ff+"-nw -v 0 MeshInit.edp > OUT");

for (real K0=.7 ; K0<.9; K0=K0+.025)
	{
	exec("echo '"+K0+" "+dpdz+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
	exec("cp MeshBridge.msh MeshBridge_guess.msh");
	exec("cat Infos_Geom.txt >> Geom_Ponts_L"+L+".dat");
	exec("echo '"+m+"' | "+ff+"-nw -v 0 Eigen_Bridge_Potential.edp");
	exec("cat spectrum.dat >> Eigen_Ponts_L"+L+"_m"+m+".dat");
	};

// boucle sur K0 pour valeurs croissantes  jusqu'a 1.32
	exec("echo ' 0 "+L+" "+d+"' | "+ff+"-nw -v 0 MeshInit.edp > OUT");
	for (real K0=1 ; K0<1.34; K0=K0+.02)
	{
	exec("echo '"+K0+" "+dpdz+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
	exec("cp MeshBridge.msh MeshBridge_guess.msh");
	exec("cat Infos_Geom.txt >> Geom_Ponts_L"+L+".dat");
	exec("echo '"+m+"' | "+ff+"-nw -v 0 Eigen_Bridge_Potential.edp");
	exec("cat spectrum.dat >> Eigen_Ponts_L"+L+"_m"+m+".dat");
	};
	
real K0 = 1.1;
exec("echo '"+K0+" "+dpdz+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
// boucle sur K0 pour remonter la branche asymetrique avec imperfection
dpdz = 0.01;
	exec("echo ' 0 "+L+" "+d+"' | "+ff+"-nw -v 0 MeshInit.edp > OUT");
	for (real K0=1.1 ; K0>0.9; K0=K0-.005)
	{
	exec("echo '"+K0+" "+dpdz+"' | "+ff+"-nw -v 0 Newton_FormePont.edp >> OUT");
	exec("cp MeshBridge.msh MeshBridge_guess.msh");
	exec("cat Infos_Geom.txt >> Geom_Ponts_L"+L+".dat");
	exec("echo '"+m+"' | "+ff+"-nw -v 0 Eigen_Bridge_Potential.edp");
	exec("cat spectrum.dat >> Eigen_Ponts_L"+L+"_m"+m+".dat");
	};


// 
