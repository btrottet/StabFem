//verbosity = 100;
real R = 1,Rbase=1;
real LL,RMAX,Lsurf,RP=0.5;
int d=20;
int typegeom;

real K0, dpdz,gamma;
K0 = 1;dpdz = 0;gamma =1;

include "Macros_StabFem.edp"

cout << "Construction du Maillage initial 'guess' " << endl << endl; 

cout << " Type de geometrie : (0 = cylindre ; 1 = portion de sphere ; 2 = portion de sinusoide ; 3 = portion d'ellipse)" << endl;
cin >> typegeom;

cout << " ENTREZ La longueur L ?" << endl;
cin  >> LL;

cout << " ENTREZ Le rayon de la sphere ?" << endl;
cin  >> RP;

cout << " ENTREZ La densite du maillage ?" << endl;
cin  >> d;


border Side1(t=0,R){y=0;x=t;label=3;};
border Axe1(t=LL,LL/2+RP){y = t ; x = 0;label=1;};
border Axe2(t=LL/2-RP,0){y = t ; x = 0;label=1;};
border Side2(t=R,0){y=LL ; x = t;label=3;};
mesh th;
if (typegeom==0) // cylindre
{
RMAX = R;
border SurfBulle(t=0,LL){y=t;x=R;label=2;};
Lsurf=LL;
plot(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe1(LL/2*d)+Axe2(LL/2*d));
th = buildmesh(SurfBulle(Lsurf*d)+Side1(R*d)+Side2(R*d)+Axe1(LL/2*d)+Axe2(LL/2*d));
};

//if (RP>0) {
//border Sideb1(t=0,R){y=0;x=t;label=3;};
//border Axeb1(t=LL,LL/2+RP){y = t ; x = 0;label=1;};
//border Sphb(t=pi,0){y=LL/2-RP*cos(t); x=RP*sin(t); label=6;};
//border Axeb2(t=LL/2-RP,0){y = t ; x = 0;label=1;};
//border Sideb2(t=R,0){y=LL ; x = t;label=3;};
//mesh th;
//
//if (typegeom==0) // cylindre
//{
//RMAX = R;
//border SurfBulleb(t=0,LL){y=t;x=R;label=2;};
//Lsurf=LL;
//plot(SurfBulleb(Lsurf*d)+Side1b(R*d)+Side2b(R*d)+Axe1b((LL-RP)/2*d)+Sphb(3.14*RP*d)+Axe2b((LL-RP)/2*d));
//th = buildmesh(SurfBulleb(Lsurf*d)+Side1b(R*d)+Side2b(R*d)+Axe1b((LL-RP)/2*d)+Sphb(3.14*RP*d)+Axe2b((LL-RP)/2*d));
//};
//};


cout << "==> Longueur = " << LL << endl;
cout << "==> Densite = " << d << endl;


plot(th,wait=1);




//SAVE MESH TO FILE

savemesh(th,ffdatadir+"mesh_guess.msh");
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometry for StabFem. Problem type : " << endl;
			file << "3DFreeSurfaceStatic" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real r real L real rsph" << endl;
			file << R  << endl << LL  << endl << RP << endl;
}




// SECOND AUXILIARY FILE mesh.ff2m
{ 
mesh Shempty=emptymesh(th); 	


include "Macros_Geometrie_Surface.edp";
SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface);
CalcGeomSurf;

SFWriteMesh(ffdatadir+"mesh.ff2m",th)
}


exec("cp "+ffdatadir+"mesh.ff2m "+ffdatadir+"mesh_guess.ff2m");



//// CREATION OF A BASE FLOW FILE
//// (this is a	static problem so there is actually no base flow. However the file is created to ensure the right functioning of StabFem	
	
	
		fespace femp2(th,P2);
		femp2 phi = 0;
		fespace femp1(th,P2);
		femp1 phiP1 = 0;
				
		ofstream file(ffdatadir+"BaseFlow.txt");
	    file << phi[] << endl;
	    file <<  endl << 0 << endl;

//// EXPORTATION DU CHAMP DE BASE AUX FORMAT FF2M

SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",phiP1);


		
